real_cmpl <- grepl('[[:digit:]]', first_char_id);
real_single <- real != real_cmpl;
least <- subtab$`Compl. Dist. Class` == 'Least Distant';
most <- !least;
real_cmpl_least <- tmp == real_cmpl; tmp <- least;
real_cmpl_most <- (most == real_cmpl && real_cmpl == TRUE);
return(data.table(real, fake, real_cmpl, real_single, real_cmpl_least, real_cmpl_most));
}
idxs <- get_index(tab[, c('RNIE Mode', 'ID complementary couple', 'Compl. Dist. Class'), with = FALSE]);
get_index <- function(subtab) {
fake <- subtab$`RNIE Mode` == 'Fake';
real <- !fake;
# True couples must have an id which begins with a number
first_char_id <- substr(subtab$`ID complementary couple`, 1, 1);
real_cmpl <- grepl('[[:digit:]]', first_char_id);
real_single <- real != real_cmpl;
least <- subtab$`Compl. Dist. Class` == 'Least Distant';
most <- !least;
tmp <- least; real_cmpl_least <- tmp == real_cmpl;
real_cmpl_most <- (most == real_cmpl && real_cmpl == TRUE);
return(data.table(real, fake, real_cmpl, real_single, real_cmpl_least, real_cmpl_most));
}
idxs <- get_index(tab[, c('RNIE Mode', 'ID complementary couple', 'Compl. Dist. Class'), with = FALSE]);
idxs
idxs[1:20,]
get_index <- function(subtab) {
fake <- subtab$`RNIE Mode` == 'Fake';
real <- !fake;
# True couples must have an id which begins with a number
first_char_id <- substr(subtab$`ID complementary couple`, 1, 1);
real_cmpl <- grepl('[[:digit:]]', first_char_id);
real_single <- real != real_cmpl;
least <- subtab$`Compl. Dist. Class` == 'Least Distant';
most <- !least;
tmp <- least == real_cmpl; real_cmpl_least <- tmp == real_cmpl;
real_cmpl_most <- (most == real_cmpl && real_cmpl == TRUE);
return(data.table(real, fake, real_cmpl, real_single, real_cmpl_least, real_cmpl_most));
}
idxs <- get_index(tab[, c('RNIE Mode', 'ID complementary couple', 'Compl. Dist. Class'), with = FALSE]);
idxs
get_index <- function(subtab) {
fake <- subtab$`RNIE Mode` == 'Fake';
real <- !fake;
# True couples must have an id which begins with a number
first_char_id <- substr(subtab$`ID complementary couple`, 1, 1);
real_cmpl <- grepl('[[:digit:]]', first_char_id);
real_single <- real != real_cmpl;
least <- subtab$`Compl. Dist. Class` == 'Least Distant';
most <- !least;
tmp <- least == real_cmpl; real_cmpl_least <- tmp == real_cmpl;
real_cmpl_most <- (most == real_cmpl && real_cmpl == TRUE);
return(data.table(real, fake, real_cmpl, real_single, least, most));
}
idxs <- get_index(tab[, c('RNIE Mode', 'ID complementary couple', 'Compl. Dist. Class'), with = FALSE]);
idxs
get_index <- function(subtab) {
fake <- subtab$`RNIE Mode` == 'Fake';
real <- !fake;
# True couples must have an id which begins with a number
first_char_id <- substr(subtab$`ID complementary couple`, 1, 1);
real_cmpl <- grepl('[[:digit:]]', first_char_id);
real_single <- real != real_cmpl;
least <- subtab$`Compl. Dist. Class` == 'Least Distant';
most <- !least;
tmp <- least == real_cmpl; real_cmpl_least <- tmp == real_cmpl;
real_cmpl_most <- least != real_cmpl
return(data.table(real, fake, real_cmpl, real_single, least, real_cmpl_most));
}
idxs <- get_index(tab[, c('RNIE Mode', 'ID complementary couple', 'Compl. Dist. Class'), with = FALSE]);
idxs
idxs$real_cmpl == T
idxs$real_cmpl == T && idxs$least == idxs$real_cmpl
idxs$real_cmpl == T & idxs$least == idxs$real_cmpl
get_index <- function(subtab) {
fake <- subtab$`RNIE Mode` == 'Fake';
real <- !fake;
# True couples must have an id which begins with a number
first_char_id <- substr(subtab$`ID complementary couple`, 1, 1);
real_cmpl <- grepl('[[:digit:]]', first_char_id);
real_single <- real != real_cmpl;
least <- subtab$`Compl. Dist. Class` == 'Least Distant';
most <- !least;
real_least <- real_cmpl == TRUE & least == real_cmpl;
real_most <- real_cmpl == FALSE & most == real_cmpl;
return(data.table(real, fake, real_cmpl, real_single, real_least, real_most));
}
get_index <- function(subtab) {
fake <- subtab$`RNIE Mode` == 'Fake';
real <- !fake;
# True couples must have an id which begins with a number
first_char_id <- substr(subtab$`ID complementary couple`, 1, 1);
real_cmpl <- grepl('[[:digit:]]', first_char_id);
real_single <- real != real_cmpl;
least <- subtab$`Compl. Dist. Class` == 'Least Distant';
most <- !least;
real_least <- real_cmpl == TRUE & least == real_cmpl;
real_most <- real_cmpl == TRUE & most == real_cmpl;
return(data.table(real, fake, real_cmpl, real_single, real_least, real_most));
}
idxs <- get_index(tab[, c('RNIE Mode', 'ID complementary couple', 'Compl. Dist. Class'), with = FALSE]);
idxs$real_cmpl == T & idxs$least == idxs$real_cmpl
idxs
idxs[1:20,]
get_index <- function(subtab) {
fake <- subtab$`RNIE Mode` == 'Fake';
real <- !fake;
# True couples must have an id which begins with a number
first_char_id <- substr(subtab$`ID complementary couple`, 1, 1);
real_cmpl <- grepl('[[:digit:]]', first_char_id);
real_single <- real != real_cmpl;
least <- subtab$`Compl. Dist. Class` == 'Least Distant';
most <- !least;
real_least <- real_cmpl == TRUE & least == real_cmpl;
real_most <- real_cmpl == TRUE & most == real_cmpl;
return(data.table(real, fake, real_cmpl, real_single,
least, most, real_least, real_most));
}
idxs <- get_index(tab[, c('RNIE Mode', 'ID complementary couple', 'Compl. Dist. Class'), with = FALSE]);
idxs[1:50,]
get_index <- function(subtab) {
fake <- subtab$`RNIE Mode` == 'Fake';
real <- !fake;
least <- subtab$`Compl. Dist. Class` == 'Least Distant';
most <- !least;
# True couples must have an id which begins with a number
first_char_id <- substr(subtab$`ID complementary couple`, 1, 1);
real_cmpl <- grepl('[[:digit:]]', first_char_id);
real_single <- real != real_cmpl;
real_least <- real_cmpl == TRUE & least == real_cmpl;
real_most <- real_cmpl == TRUE & most == real_cmpl;
return(data.table(real, fake, least, most,
real_cmpl, real_single, real_least, real_most));
}
idxs <- get_index(tab[, c('RNIE Mode', 'ID complementary couple', 'Compl. Dist. Class'), with = FALSE]);
idxs
idxs[1:30,]
library(optparse);
#!/usr/bin/env Rscript
library(optparse);
library(data.table);
# library(ggplot2);
# library(grDevices);
# library(scales);
# library(stats);
# library(ggsignif);
get_args <- function() {
option_list <- list(
make_option('--table', dest = 'table', action = 'store'),
make_option('--output_dir', dest = 'output_dir', action = 'store'),
make_option('--log', dest = 'log', action = 'store')
);
return <- parse_args(OptionParser(option_list = option_list));
}
get_index <- function(tab) {
fake <- tab$`RNIE Mode` == 'Fake';
real <- !fake;
least <- tab$`Compl. Dist. Class` == 'Least Distant';
most <- !least;
# True couples must have an id which begins with a number
first_char_id <- substr(tab$`ID complementary couple`, 1, 1);
real_cmpl <- grepl('[[:digit:]]', first_char_id);
real_single <- real != real_cmpl;
real_least <- real_cmpl == TRUE & least == real_cmpl;
real_most <- real_cmpl == TRUE & most == real_cmpl;
return(data.table(real, fake, least, most,
real_cmpl, real_single, real_least, real_most));
}
#############################################################################
# MAIN
#############################################################################
args <- get_args();
# For testing
if(1 == 1 && is.null(opt$list_term)) {
args$table <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Output_of_each_step/Step06-With_fake_complements_list.csv";
args$output_dir <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Figures";
args$log <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Figures/test_R.log";
}
tab <- fread(opt$table, sep = '\t', header = TRUE);
idxs <- get_index(tab);
args
library(optparse);
library(data.table);
# library(ggplot2);
# library(grDevices);
# library(scales);
# library(stats);
# library(ggsignif);
get_args <- function() {
option_list <- list(
make_option('--table', dest = 'table', action = 'store'),
make_option('--output_dir', dest = 'output_dir', action = 'store'),
make_option('--log', dest = 'log', action = 'store')
);
return(parse_args(OptionParser(option_list = option_list)));
}
get_index <- function(tab) {
fake <- tab$`RNIE Mode` == 'Fake';
real <- !fake;
least <- tab$`Compl. Dist. Class` == 'Least Distant';
most <- !least;
# True couples must have an id which begins with a number
first_char_id <- substr(tab$`ID complementary couple`, 1, 1);
real_cmpl <- grepl('[[:digit:]]', first_char_id);
real_single <- real != real_cmpl;
real_least <- real_cmpl == TRUE & least == real_cmpl;
real_most <- real_cmpl == TRUE & most == real_cmpl;
return(data.table(real, fake, least, most,
real_cmpl, real_single, real_least, real_most));
}
#############################################################################
# MAIN
#############################################################################
args <- get_args();
args
args$table
#!/usr/bin/env Rscript
library(optparse);
library(data.table);
# library(ggplot2);
# library(grDevices);
# library(scales);
# library(stats);
# library(ggsignif);
get_args <- function()
{
option_list <- list(
make_option('--table', dest = 'table', action = 'store'),
make_option('--output_dir', dest = 'output_dir', action = 'store'),
make_option('--log', dest = 'log', action = 'store')
);
return(parse_args(OptionParser(option_list = option_list)));
}
load_test_args <- function(args)
{
args$table <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Output_of_each_step/Step06-With_fake_complements_list.csv";
args$output_dir <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Figures";
args$log <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Figures/test_R.log";
return(args);
}
get_index <- function(tab)
{
fake <- tab$`RNIE Mode` == 'Fake';
real <- !fake;
least <- tab$`Compl. Dist. Class` == 'Least Distant';
most <- !least;
# True couples must have an id which begins with a number
first_char_id <- substr(tab$`ID complementary couple`, 1, 1);
real_cmpl <- grepl('[[:digit:]]', first_char_id);
real_single <- real != real_cmpl;
real_least <- real_cmpl == TRUE & least == real_cmpl;
real_most <- real_cmpl == TRUE & most == real_cmpl;
return(data.table(real, fake, least, most,
real_cmpl, real_single, real_least, real_most));
}
#############################################################################
# MAIN
#############################################################################
args <- get_args(); if(is.null(args$table)) { load_test_args(); }
tab <- fread(opt$table, sep = '\t', header = TRUE);
idxs <- get_index(tab);
print(args)
args$table
is.null(args.table)
is.null(args$table)
#!/usr/bin/env Rscript
library(optparse);
library(data.table);
# library(ggplot2);
# library(grDevices);
# library(scales);
# library(stats);
# library(ggsignif);
get_args <- function()
{
option_list <- list(
make_option('--table', dest = 'table', action = 'store'),
make_option('--output_dir', dest = 'output_dir', action = 'store'),
make_option('--log', dest = 'log', action = 'store')
);
return(parse_args(OptionParser(option_list = option_list)));
}
load_test_args <- function(args)
{
args$table <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Output_of_each_step/Step06-With_fake_complements_list.csv";
args$output_dir <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Figures";
args$log <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Figures/test_R.log";
return(args);
}
get_index <- function(tab)
{
fake <- tab$`RNIE Mode` == 'Fake';
real <- !fake;
least <- tab$`Compl. Dist. Class` == 'Least Distant';
most <- !least;
# True couples must have an id which begins with a number
first_char_id <- substr(tab$`ID complementary couple`, 1, 1);
real_cmpl <- grepl('[[:digit:]]', first_char_id);
real_single <- real != real_cmpl;
real_least <- real_cmpl == TRUE & least == real_cmpl;
real_most <- real_cmpl == TRUE & most == real_cmpl;
return(data.table(real, fake, least, most,
real_cmpl, real_single, real_least, real_most));
}
#############################################################################
# MAIN
#############################################################################
args <- get_args(); if(is.null(args$table)) { args <- load_test_args(); }
tab <- fread(opt$table, sep = '\t', header = TRUE);
idxs <- get_index(tab);
#!/usr/bin/env Rscript
library(optparse);
library(data.table);
# library(ggplot2);
# library(grDevices);
# library(scales);
# library(stats);
# library(ggsignif);
get_args <- function()
{
option_list <- list(
make_option('--table', dest = 'table', action = 'store'),
make_option('--output_dir', dest = 'output_dir', action = 'store'),
make_option('--log', dest = 'log', action = 'store')
);
return(parse_args(OptionParser(option_list = option_list)));
}
load_test_args <- function(args)
{
args$table <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Output_of_each_step/Step06-With_fake_complements_list.csv";
args$output_dir <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Figures";
args$log <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Figures/test_R.log";
return(args);
}
get_index <- function(tab)
{
fake <- tab$`RNIE Mode` == 'Fake';
real <- !fake;
least <- tab$`Compl. Dist. Class` == 'Least Distant';
most <- !least;
# True couples must have an id which begins with a number
first_char_id <- substr(tab$`ID complementary couple`, 1, 1);
real_cmpl <- grepl('[[:digit:]]', first_char_id);
real_single <- real != real_cmpl;
real_least <- real_cmpl == TRUE & least == real_cmpl;
real_most <- real_cmpl == TRUE & most == real_cmpl;
return(data.table(real, fake, least, most,
real_cmpl, real_single, real_least, real_most));
}
#############################################################################
# MAIN
#############################################################################
args <- get_args(); if(is.null(args$table)) { args <- load_test_args(args); }
tab <- fread(opt$table, sep = '\t', header = TRUE);
idxs <- get_index(tab);
args
#!/usr/bin/env Rscript
library(optparse);
library(data.table);
# library(ggplot2);
# library(grDevices);
# library(scales);
# library(stats);
# library(ggsignif);
get_args <- function()
{
option_list <- list(
make_option('--table', dest = 'table', action = 'store'),
make_option('--output_dir', dest = 'output_dir', action = 'store'),
make_option('--log', dest = 'log', action = 'store')
);
return(parse_args(OptionParser(option_list = option_list)));
}
load_test_args <- function()
{
args$table <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Output_of_each_step/Step06-With_fake_complements_list.csv";
args$output_dir <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Figures";
args$log <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Figures/test_R.log";
return(args);
}
get_index <- function(tab)
{
fake <- tab$`RNIE Mode` == 'Fake';
real <- !fake;
least <- tab$`Compl. Dist. Class` == 'Least Distant';
most <- !least;
# True couples must have an id which begins with a number
first_char_id <- substr(tab$`ID complementary couple`, 1, 1);
real_cmpl <- grepl('[[:digit:]]', first_char_id);
real_single <- real != real_cmpl;
real_least <- real_cmpl == TRUE & least == real_cmpl;
real_most <- real_cmpl == TRUE & most == real_cmpl;
return(data.table(real, fake, least, most,
real_cmpl, real_single, real_least, real_most));
}
#############################################################################
# MAIN
#############################################################################
args <- get_args(); if(is.null(args$table)) { args <- load_test_args(); }
tab <- fread(opt$table, sep = '\t', header = TRUE);
idxs <- get_index(tab);
args
#!/usr/bin/env Rscript
library(optparse);
library(data.table);
# library(ggplot2);
# library(grDevices);
# library(scales);
# library(stats);
# library(ggsignif);
get_args <- function()
{
option_list <- list(
make_option('--table', dest = 'table', action = 'store'),
make_option('--output_dir', dest = 'output_dir', action = 'store'),
make_option('--log', dest = 'log', action = 'store')
);
return(parse_args(OptionParser(option_list = option_list)));
}
load_test_args <- function()
{
args$table <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Output_of_each_step/Step06-With_fake_complements_list.csv";
args$output_dir <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Figures";
args$log <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Figures/test_R.log";
return(args);
}
get_index <- function(tab)
{
fake <- tab$`RNIE Mode` == 'Fake';
real <- !fake;
least <- tab$`Compl. Dist. Class` == 'Least Distant';
most <- !least;
# True couples must have an id which begins with a number
first_char_id <- substr(tab$`ID complementary couple`, 1, 1);
real_cmpl <- grepl('[[:digit:]]', first_char_id);
real_single <- real != real_cmpl;
real_least <- real_cmpl == TRUE & least == real_cmpl;
real_most <- real_cmpl == TRUE & most == real_cmpl;
return(data.table(real, fake, least, most,
real_cmpl, real_single, real_least, real_most));
}
#############################################################################
# MAIN
#############################################################################
args <- get_args(); if(is.null(args$table)) { args <- load_test_args(); }
tab <- fread(opt$table, sep = '\t', header = TRUE);
idxs <- get_index(tab);
summary(idxs)
is_equal_distribution <- function(x, y)
{
# 1. Can 2-samples t test can be applied?
shapiro_pval_x <- normaTest(x)
print(shapiro.pval_x)
}
is_equal_distribution(log10(tab[idxs$single]$`termStart-UpGeneEnd`,
tab[idxs$fake]$`termStart-UpGeneEnd`)
)
library(stats)
is_equal_distribution(log10(tab[idxs$single]$`termStart-UpGeneEnd`,
tab[idxs$fake]$`termStart-UpGeneEnd`))
help(shapiro.test)
is_equal_distribution <- function(x, y)
{
shapiro_pval_x <- shapiro.test(x)
print(shapiro_pval_x)
}
is_equal_distribution(log10(tab[idxs$single]$`termStart-UpGeneEnd`,
tab[idxs$fake]$`termStart-UpGeneEnd`))
is_equal_distribution(log10(tab[idxs$single]$`termStart-UpGeneEnd`),
log10(tab[idxs$fake]$`termStart-UpGeneEnd`))
is_equal_distribution(log10(tab[idxs$single]$`termStart-UpGeneEnd`),
log10(tab[idxs$fake]$`termStart-UpGeneEnd`))
is_equal_distribution(numeric(log10(tab[idxs$single]$`termStart-UpGeneEnd`)),
numeric(log10(tab[idxs$fake]$`termStart-UpGeneEnd`)))
is_equal_distribution(log10(numeric(tab[idxs$single]$`termStart-UpGeneEnd`)),
log10(numeric(tab[idxs$fake]$`termStart-UpGeneEnd`)))
help(numeric)
is_equal_distribution(log10(as.numeric(tab[idxs$single]$`termStart-UpGeneEnd`)),
log10(as.numeric(tab[idxs$fake]$`termStart-UpGeneEnd`)))
is_equal_distribution <- function(x, y)
{
print(length(x))
shapiro_pval_x <- shapiro.test(x)
print(shapiro_pval_x)
}
#############################################################################
# MAIN
#############################################################################
args <- get_args(); if(is.null(args$table)) { args <- load_test_args(); }
tab <- fread(opt$table, sep = '\t', header = TRUE);
idxs <- get_index(tab);
is_equal_distribution(log10(as.numeric(tab[idxs$single]$`termStart-UpGeneEnd`)),
log10(as.numeric(tab[idxs$fake]$`termStart-UpGeneEnd`)))
tab[idxs$single]$`termStart-UpGeneEnd`
idxs
is_equal_distribution(log10(as.numeric(tab[idxs$real_single]$`termStart-UpGeneEnd`)),
log10(as.numeric(tab[idxs$fake]$`termStart-UpGeneEnd`)))
help(wilcox.test)
is_equal_distribution <- function(x, y)
{
# Non param. Wilcoxon test is chosen.
# x, y don't satisfy conditions of application of param. tests.
wilcox.test(x, y)
}
#############################################################################
# MAIN
#############################################################################
args <- get_args(); if(is.null(args$table)) { args <- load_test_args(); }
tab <- fread(opt$table, sep = '\t', header = TRUE);
idxs <- get_index(tab);
is_equal_distribution(log10(as.numeric(tab[idxs$real_single]$`termStart-UpGeneEnd`)),
log10(as.numeric(tab[idxs$fake]$`termStart-UpGeneEnd`)))
log10(as.numeric(tab[idxs$fake]$`termStart-UpGeneEnd`))
