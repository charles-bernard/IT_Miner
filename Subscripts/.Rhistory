#############################################################################
# LOAD LIBRARIES
#############################################################################
library(data.table);
# library(ggplot2);
# library(grDevices);
# library(optparse);
# library(scales);
# library(stats);
#library(ggsignif);
#############################################################################
# READ & EXTRACT THE OPTIONS
#############################################################################
option_list <- list(
make_option("--table", dest = "table", action = "store"),
make_option("--output_dir", dest = "output_dir", action = "store"),
make_option("--log", dest = "log", action = "store")
);
opt <- parse_args(OptionParser(option_list = option_list));
# For testing
if(1 == 1) and (is.null(opt$list_term)) {
opt$table <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Output_of_each_step/Step06-With_fake_complements_list.csv";
opt$output_dir <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Figures";
opt$log <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Figures/test_R.log"
}
option_list <- list(
make_option("--table", dest = "table", action = "store"),
make_option("--output_dir", dest = "output_dir", action = "store"),
make_option("--log", dest = "log", action = "store")
);
opt <- parse_args(OptionParser(option_list = option_list));
# For testing
if(1 == 1) and (is.null(opt$list_term)) {
opt$table <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Output_of_each_step/Step06-With_fake_complements_list.csv";
opt$output_dir <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Figures";
opt$log <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Figures/test_R.log"
}
library(optparse);
option_list <- list(
make_option("--table", dest = "table", action = "store"),
make_option("--output_dir", dest = "output_dir", action = "store"),
make_option("--log", dest = "log", action = "store")
);
opt <- parse_args(OptionParser(option_list = option_list));
# For testing
if(1 == 1) and (is.null(opt$list_term)) {
opt$table <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Output_of_each_step/Step06-With_fake_complements_list.csv";
opt$output_dir <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Figures";
opt$log <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Figures/test_R.log"
}
if(1 == 1) && (is.null(opt$list_term)) {
opt$table <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Output_of_each_step/Step06-With_fake_complements_list.csv";
opt$output_dir <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Figures";
opt$log <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Figures/test_R.log";
}
if(1 == 1 && is.null(opt$list_term)) {
opt$table <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Output_of_each_step/Step06-With_fake_complements_list.csv";
opt$output_dir <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Figures";
opt$log <- "/home/charles/clones/IT_Miner/Out/Escherichia_coli/U00096.2/Figures/test_R.log";
}
opt$log
summary(tab)
summary(table)
tab <- fread(opt$table, sep = "\t", header = TRUE);
tab[, .SD, `RNIE Mode` == fake]
tab[, .SD, `RNIE Mode` == "fake"]
grepl("[:digit:]", "abc")
grepl("[:digit:]", "abc1")
grepl("[:digit:]", "1")
grepl("[:alpha:]", "1")
grepl("[[:alpha:]]", "1")
grepl("[[:alpha:]]", "a")
grepl("[[:digit:]]", "a")
grepl("[[:digit:]]", "1")
f1 <- substr(tab$`ID complementary couple`, 1, 1);
grepl("[[:digit:]]", f1)
grepl("[[:digit:]]", f1[true_idx])
fake_idx <- which(tab$`RNIE Mode` == 'fake');
true_idx <- which(tab$`RNIE Mode` != 'fake');
grepl("[[:digit:]]", "1")
grepl("[[:digit:]]", "1a")
grepl("[[:digit:]]", "a1a")
grepl("[[:digit:]]", "a2a")
grepl("[[:digit:]]", "aa")
fake_idx <- which(tab$`RNIE Mode` == 'fake');
true_idx <- which(tab$`RNIE Mode` != 'fake');
# True couples must have an id which begins by a number
first_char_id <- substr(tab$`ID complementary couple`, 1, 1);
cmpl_idx <- grepl("[[:digit:]]", first_char_id);
cmpl_idx
fake_idx
summary(tab)
tab[1:10]$`RNIE Mode`
cmpl_idx <- grepl('[[:digit:]]', first_char_id);
fake_idx <- which(tab$`RNIE Mode` == 'Fake');
true_idx <- which(tab$`RNIE Mode` != 'Fake');
true_idx
length(true_idx)
false(true_idx)
length(compl_idx)
length(cmpl_idx)
length(first_char_id)
tab$`RNIE Mode` == 'Fake'
intersect(cmpl_idx, true_idx)
true_idx[compl_idx]
true_idx[cmpl_idx]
tab[compl_idx,`RNIE_Mode`]
tab[cmpl_idx,`RNIE_Mode`]
tab[cmpl_idx,`RNIE Mode`]
setdiff(c(1,2), c(4, 2))
cmpl_idx == true_idx
cmpl_idx == true_idx
length(cmpl_idx)
length(true_idx)
true_idx <- tab$`RNIE Mode` != 'Fake';
cmpl_idx == true_idx
fake_idx <- tab$`RNIE Mode` == 'Fake';
true_idx <- tab$`RNIE Mode` != 'Fake';
# True couples must have an id which begins by a number
first_char_id <- substr(tab$`ID complementary couple`, 1, 1);
cmpl_idx <- grepl('[[:digit:]]', first_char_id);
single_idx <- true_idx != cmpl_idx;
single_idx
single_idx[1:10]
cmpl_idx[1:10]
true_idx[1:10]
cmpl_idx[1:20]
single_idx[1:20]
true_idx[1:20]
